# Shell to the last container
function last_container {
  if [[ $(last_container_id) ]]; then
    docker exec -it $(last_container_id) bash
  else
    echo "No containers running."
  fi
}

# Gives the ID of the last container 
function last_container_id {
  docker ps -q | tail -n 1
}

# Watches over docker containers running without taking
# the whole screen
function _docker_ps_colorize {
  esc=$(printf '\033')
  table="$1"
  table=`echo "$table" | sed "2,$ s/\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)/${esc}[92m\1${esc}[0m/g"` # IP
  table=`echo "$table" | sed -r "2,$ s/([/\\<>:, ]*)([0-9]{3,6})([/\\<>:, ]+)/\1${esc}[34m\2${esc}[0m\3/g"` # Port
  table=`echo "$table" | sed "2,$ s/\(\s\)\(\w\{1,\}\)\(\s\)/\1${esc}[35m\2${esc}[0m\3/"` # 2nd col
  table=`echo "$table" | sed "1s/.*/${esc}[1m&${esc}[0m/"` # Headers
  echo "$table"
}
export -f _docker_ps_colorize
function _docker_ps_compact {
  if [[ $(docker ps -q) ]]; then
    DELI='|'
    rows=`docker inspect --format="{{.Id}}$DELI{{.Config.Image}}$DELI{{.Config.Cmd}}$DELI{{range \\\$p, \\\$conf := .NetworkSettings.Ports}}{{\\\$p}}->{{(index \\$conf 0).HostPort}}{{end}}$DELI{{.NetworkSettings.IPAddress}}" $(docker ps -q) | cut -c 1-6,65- | sed "s/$DELI$DELI/$DELI  $DELI/g"`
    rows=`echo "$rows" | sed 's/\[.*&&[ ]*\(.*\)\]/[..\1]/g'` # keep last cmd if many
    rows=`echo "$rows" | sed 's/\[\(.*\)\]/\1/g'`             # remove cmd brackets
    headers="Container${DELI}Image${DELI}Command${DELI}Ports${DELI}IP"
    table=`echo "${headers}"$'\n'"${rows}" | column -s="$DELI" -t`
    table=`_docker_ps_colorize "$table"`
    echo "$table"
  else
    echo "No containers running."
  fi
}
export -f _docker_ps_compact
alias watchdocker='watch --color bash -c _docker_ps_compact'
