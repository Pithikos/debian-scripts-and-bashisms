function file_extension () {
	echo "$1" | cut -f 2 -d.
}


function file_barename () {
	echo "$1" | cut -f 1 -d.
}


function is_integer () {
	re='^[0-9]+$'
	if [[ $1 =~ $re ]]; then
		return 0
	else
		return 1
	fi
}


# Remove any ARW that lack corresponding JPGs
function photo_rm_orphan_arw () {
  for filename in `ls *.ARW`; do
    barename=`basename -s '.ARW' "$filename"`
    jpg_file="$barename.JPG"

    # Test against corresponding .JPG
    if [ ! -f "$jpg_file" ]; then
      num_files=`ls "$barename".* | wc -l`

      # Delete automatically ONLY if it's the only file
      if [[ $num_files == '1' ]]; then
        echo "Delete $filename? Files found: $num_files"
        read
        rm "$filename"
      else
        echo "Will NOT delete $filename - found multiple files for $barename.*"
      fi
    fi
  done
}


# Make a resized copy of a photo photo (requires imagemagick)
function photo_copy () { # image size
	if ! mogrify -version &> /dev/null; then
		echo "You need to install imagemagick";
		return 1
	fi
	
	if [ ! $1 ] || ! is_integer $1; then
		echo "First argument should be the photo size in pixels"
		return 1
	fi
	
	if [ ! $2 ]; then
		echo "You need to give at least one file to resize"
		return 1
	fi

	for f in "${@:2}"; do
		# Make a copy first
		original="$PWD/$f"
		target="$PWD/$(file_barename $f)_resized.$(file_extension $f)"
		cp "$original" "$target"

		# Resize on largest side
		convert "$target" -resize "$1>" "$target"
	done

}


# Create a folder resized/ 
function photo_resize () {
	outdir='resized'
	if [ -d $outdir ]; then
		echo "ERROR: directory '$outdir' already exists"
		return 1
	fi

	photo_copy "$@" || return 1
	
	# Move files one by one
	mkdir "$outdir"
	for f in "${@:2}"; do
		resized_file="$(file_barename $f)_resized.$(file_extension $f)"
		mv "$resized_file" "${outdir}/${f}"
	done

	echo "Resized all images to '$outdir'"
}
