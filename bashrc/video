#!/bin/bash

killvlc() {
  kill -9 $(pidof vlc) 2> /dev/null
}


function file_barename () {
	echo "$1" | cut -f 1 -d.
}


VIDEO_BITRATE='240M' # 50fps 1080 240br
VIDEO_BITRATE='75M' # 50fps 1080 75br
VIDEO_CODEC='dnxhd'


# Convert AVCHD from Sony into a more post-production friendly format
function video_convert_postfriendly () { # image size
	if ! ffmpeg -version &> /dev/null; then
		echo "You need to install ffmpeg";
		return 1
	fi
	if [ ! $1 ]; then
		echo "You need to give at least one input video file"
		return 1
	fi

	mkdir ./converted
	for f in "${@:1}"; do
		barename=$(file_barename "$f")
		ffmpeg -i "$f" -c:v $VIDEO_CODEC -vf "scale=1280:720,fps=30000/1001,format=yuv422p" -b:v 110M -c:a pcm_s16le "./converted/${barename}.mov"
	done

}


function video_generate_deshake_files () {
	if [ ! $1 ]; then
    echo "You need to give at least one input video file"
    return 1
  fi

	for f in "${@:1}"; do
		barename=$(file_barename "$f")
		ffmpeg -i "$f" -vf "vidstabdetect=shakiness=10:accuracy=15:result=${barename}.trf" -f null -
  done
}


# function video_deshake () {
#   if [ ! $1 ]; then
#     echo "You need to give at least one input video file"
#     return 1
#   fi
#
# 	# First generate deshake files
# 	video_generate_deshake_files "${@:1}"
#
# 	# Then deshake to post-edit format
# 	for f in "${@:1}"; do
# 		barename=$(file_barename "$f")
# 		ffmpeg -i "$f" -vf "vidstabtransform=smoothing=30:input=${barename}.trf" -c:v $VIDEO_CODEC -pix_fmt yuv422p -b:v "$VIDEO_BITRATE" -c:a copy "${barename}_deshaked.mov"
# 	done
# }


function video_to_dnxhd () {

	if [ ! ffmpeg -filters 2> /dev/null | grep vidstab > /dev/null ]; then
		echo "Filter vidstab not installed. Use the static ffmpeg from https://www.johnvansickle.com/ffmpeg/"
		return 1
	fi

	if [ ! $1 ]; then
    echo "You need to give at least one input video file"
    return 1
  fi

	for f in "${@:1}"; do
		barename=$(file_barename "$f")
		ffmpeg -i "$f" -c:v $VIDEO_CODEC -pix_fmt yuv422p -b:v "$VIDEO_BITRATE" -c:a copy "${barename}.mov"

		# TODO: Apply denoise

		# Also create deshake version
		# ffmpeg -i "$f" -vf "vidstabdetect=shakiness=10:accuracy=15:result=${barename}.trf" -f null -
		# ffmpeg -i "$f" -vf "vidstabtransform=smoothing=30:input=${barename}.trf" -c:v $VIDEO_CODEC -pix_fmt yuv422p -b:v "$VIDEO_BITRATE" -c:a copy "${barename}_deshaked.mov"

  done
}


function video_to_720p () {
	if [ ! $1 ]; then
		echo "You need to give at least one input video file"
		return 1
	fi
	mkdir -p converted_720p
	for f in "${@:1}"; do
		barename=$(file_barename "$f")
		ext=$(file_extension "$f")
		ffmpeg -i "$f" -vcodec libx265 -crf 20 -vf scale=-1:720 -preset veryslow "converted_720p/${barename}_720p.${ext}"
	done
}


# Generate multiple denoised files for comparison
function video_test_denoise () {
	if [ ! $1 ]; then
		echo "You need to give excactly one input video file"
		return 1
	fi
	barename=$(file_barename "$1")
	target_dir="denoised"
	clip_duration='10'  # in secs

	# Ensure we can redirect timing to a file
	TIMEFORMAT=%R
	timings_file=`mktemp`
	echo "*** STORING TIMINGS AT '$timings_file' ***"

	# Loop through all desired filters one-by-one
	mkdir -p "$target_dir"
	for filter in "hqdn3d" "removegrain" "vaguedenoiser" "bm3d" "dctdnoiz" "atadenoise" "nlmeans" "owdenoise"; do
		# No audio and lossless video so we can focus on the denoise algorithm
		start_time="$(date -u +%s)"
		ffmpeg -i $1 -t $clip_duration -an -c:v dnxhd -pix_fmt yuv422p -b:v 240M -vf $filter $target_dir/${barename}_losslessx265_denoise__${filter}.mov
		end_time="$(date -u +%s)"
		elapsed="$(($end_time-$start_time))"
		echo "${filter} ${elapsed}s" >> "$timings_file"
	done

	cat $timings_file
}
