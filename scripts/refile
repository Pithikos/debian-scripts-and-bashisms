#! /usr/bin/python3
import argparse
import os
import re
import sys
from glob import glob
from os.path import join, basename, relpath, isfile
from refile import *

parser = argparse.ArgumentParser(
    description='Remove files with regular expression.',
    epilog=r"Example: refile '(.*)\.jpeg' --rename 'mypic-$1.jpg' --dry"
)
parser.add_argument('regex', type=str, nargs='+', help='one or more regular expressions to match')

parser.add_argument('--keep', dest='keep', default=None, action='store_true', help='keep files matching regular expressions')
parser.add_argument('--remove', dest='remove', default=None, action='store_true', help='remove files matching regular expressions')
parser.add_argument('--move', dest='move', nargs=1, help='remove files matching regular expressions')
parser.add_argument('--rename', dest='rename', nargs=1, help='rename files. Pattern is of format "<sep>: <dest pattern>"')

parser.add_argument('--dry', dest='dry', action='store_true', default=False, help='show what would actually happen')
parser.add_argument('--invert-match', '-v', dest='invert_match', action='store_true', default=False)
parser.add_argument('--recursive', '-r', dest='recursive', action='store_true', default=False)
parser.add_argument('--ignore-case', '-i', dest='ignore_case', action='store_true', default=False, help='case insensitive')
parser.add_argument('--automatic', dest='automatic', nargs=1, help='automatic refiling')

parser.add_argument('-f', dest='files_only', action='store_true', default=False, help='match only files')
parser.add_argument('-d', dest='dirs_only', action='store_true', default=False, help='match only directories')
parser.add_argument('-p', dest='create_dirs', action='store_true', default=False, help='create missing directories')

args = parser.parse_args()

VALID_AUTOMATIC = (
    'group-by-name',
)


if args.automatic and args.automatic[0] not in VALID_AUTOMATIC:
    print(f'You need to pass one refiling strategy with --automatic. Valid stategies are {VALID_AUTOMATIC}')
    exit(1)
if args.create_dirs and not args.move:
    print('Parameter -p can only be used with --move')
    exit(1)


if __name__ == '__main__':
    matched_files = get_matching_files(
        args.regex,
        recursive=args.recursive,
        files_only=args.files_only,
        dirs_only=args.dirs_only,
        ignore_case=args.ignore_case,
        invert_match=args.invert_match,
    )
    if args.move:
        move_files_to_dir(matched_files, args.move[0], dry=args.dry, create_dirs=args.create_dirs)
        exit(0)
    elif args.rename:
        pattern = args.rename[0]

        # Forbid placeholders in combination with --invert-match, since placeholders can't
        # be evaluated in that case
        pattern_placeholder_count = len(re.findall(r'\$\d+', pattern))
        if pattern_placeholder_count and args.invert_match:
            print(f'Cannot use placeholders in --rename in combination with --invert-match: {pattern}')
            exit(1)

        rename_files(matched_files, pattern, dry=args.dry)
        exit(0)
    elif args.keep or args.remove:
        if args.keep:
            _all_files = all_files(recursive=args.recursive, files_only=args.files_only, dirs_only=args.dirs_only)
            matched_files = set(_all_files) - set(matched_files)
        delete_files(matched_files, dry=args.dry)
    elif args.automatic and args.automatic[0] == 'group-by-name':
        groups = autogroup_files(matched_files)
        for k, vs in groups.items():
            print(f"ðŸ—€  {k}")
            for v in vs:
                print(f"   â”„ {relpath(v)}")
        if not args.dry:
            print('-----------------------------------------------------------------------')
            for k, vs in groups.items():
                move_files(files=vs, dest=k, dry=args.dry, create_dirs=True)
            num_grouped = len(groups.values())
            print(f'Grouping {num_grouped} files out of {len(matched_files)}')


    else:
        if not matched_files:
            sys.stderr.write('No matches\n')
        else:
            show_files(matched_files)
