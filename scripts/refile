#! /usr/bin/python3
import argparse
import os
import re
from glob import glob
from os.path import join, basename, relpath

parser = argparse.ArgumentParser(description='Remove files with regular expression.')
parser.add_argument('regex', type=str, nargs='+', help='one or more regular expressions to match')

parser.add_argument('--keep', dest='keep', default=None, action='store_true', help='keep files matching regular expressions')
parser.add_argument('--remove', dest='remove', default=None, action='store_true', help='remove files matching regular expressions')
parser.add_argument('--move', dest='move', nargs=1, help='remove files matching regular expressions')

parser.add_argument('--dry', '-d', dest='dry', action='store_true', default=False, help='show what would actually happen')
parser.add_argument('--invert-match', '-v', dest='invert_match', action='store_true', default=False)
parser.add_argument('--recursive', '-r', dest='recursive', action='store_true', default=False)
parser.add_argument('--ignore-case', '-i', dest='igore_case', action='store_true', default=False, help='case insensitive')

args = parser.parse_args()

if not (args.remove or args.keep or args.move):
    print('No --keep, --remove or --move passed. Will simply print the matching files.')


def all_files():
    """ Get all offspring files under current directory """
    return glob(join(os.getcwd(), '*'), recursive=True)


def get_matching_files():
    """ Get all files matching the regex """
    all_filepaths = all_files()
    matched = []
    for filepath in all_filepaths:
        filename = basename(filepath)
        for regex in args.regex:
            if args.igore_case:
                matches = re.findall(regex, filename, flags=re.IGNORECASE)
            else:
                matches = re.findall(regex, filename)
            if matches:
                matched.append(filepath)
                break
    if args.invert_match:
        matched = set(all_filepaths) - set(matched)
    return matched


# Simply print matches
matched = get_matching_files()
if not (args.keep or args.remove or args.move):
    for f in matched:
        print(f"✔ {relpath(f)}")
    exit(0)

# Move files
if args.move:
    for f in matched:
        target = join(args.move[0], basename(f))
        pres = f"{relpath(f)} ➜ {relpath(target)}"
        if args.dry:
            print(pres)
        else:
            os.replace(f, target)
            print(f"Moved file {pres}")
    exit(0)


# Delete files based on --keep and --remove flags
for_deletion = matched
if args.keep:
    for_deletion = set(all_filepaths) - set(matched)
for f in for_deletion:
    if args.dry:
        print(f"✖ {relpath(f)}")
    else:
        os.remove(f)
        print(f"Deleted {relpath(f)}")
