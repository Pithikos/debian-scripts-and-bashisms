#! /usr/bin/python3
import argparse
import os
import re
import sys
from glob import glob
from os.path import join, basename, relpath, isfile

parser = argparse.ArgumentParser(description='Remove files with regular expression.')
parser.add_argument('regex', type=str, nargs='+', help='one or more regular expressions to match')

parser.add_argument('--keep', dest='keep', default=None, action='store_true', help='keep files matching regular expressions')
parser.add_argument('--remove', dest='remove', default=None, action='store_true', help='remove files matching regular expressions')
parser.add_argument('--move', dest='move', nargs=1, help='remove files matching regular expressions')

parser.add_argument('--dry', dest='dry', action='store_true', default=False, help='show what would actually happen')
parser.add_argument('--invert-match', '-v', dest='invert_match', action='store_true', default=False)
parser.add_argument('--recursive', '-r', dest='recursive', action='store_true', default=False)
parser.add_argument('--ignore-case', '-i', dest='igore_case', action='store_true', default=False, help='case insensitive')

parser.add_argument('-f', dest='files_only', action='store_true', default=False, help='match only files')
parser.add_argument('-d', dest='dirs_only', action='store_true', default=False, help='match only directories')
parser.add_argument('-p', dest='create_dirs', action='store_true', default=False, help='create missing directories')

args = parser.parse_args()


if args.create_dirs and not args.move:
    print('Parameter -p can only be used with --move')
    exit(1)


def all_files(recursive=False):
    """ Get all offspring files under current directory """
    all_entities = glob(join(os.getcwd(), '*'), recursive=recursive)
    if not args.files_only and not args.dirs_only:
        return all_entities
    if args.files_only:
        return [e for e in all_entities if isfile(e)]
    if args.dirs_only:
        return [e for e in all_entities if not isfile(e)]


def get_matching_files(regexes, recursive):
    """ Get all files matching the regex """
    all_filepaths = all_files(recursive)
    matched = []
    for filepath in all_filepaths:
        filename = basename(filepath)
        for regex in regexes:
            if args.igore_case:
                matches = re.findall(regex, filename, flags=re.IGNORECASE)
            else:
                matches = re.findall(regex, filename)
            if matches:
                matched.append(filepath)
                break
    if args.invert_match:
        matched = set(all_filepaths) - set(matched)
    return matched


def show_files(files):
    _dirs = []
    _files = []
    for f in files:
        if isfile(f):
            _files.append(f)
        else:
            _dirs.append(f)
    for d in _dirs:
        print(f"ðŸ—€  {relpath(d)}")
    for f in _files:
        print(f"âœ”  {relpath(f)}")


def move_files(files, dest, dry=True, create_dirs=False):
    if create_dirs:
        os.makedirs(dest)
    for f in files:
        target = join(dest, basename(f))
        pres = f"{relpath(f)} âžœ {relpath(target)}"
        if dry:
            print(pres)
        else:
            os.replace(f, target)
            print(f"Moved file {pres}")


def delete_files(files, dry=True):
    for f in files:
        if dry:
            print(f"âœ– {relpath(f)}")
        else:
            os.remove(f)
            print(f"Deleted {relpath(f)}")


if __name__ == '__main__':
    matched_files = get_matching_files(args.regex, recursive=args.recursive)
    if args.move:
        move_files(matched_files, args.move[0], dry=args.dry, create_dirs=args.create_dirs)
        exit(0)
    elif args.keep or args.remove:
        if args.keep:
            matched_files = set(all_filepaths) - set(matched_files)
        delete_files(matched_files, dry=args.dry)
    else:
        if not matched_files:
            sys.stderr.write('No matches\n')
        else:
            show_files(matched_files)
